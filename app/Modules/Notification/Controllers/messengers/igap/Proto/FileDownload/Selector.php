<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: FileDownload.proto

namespace Proto\FileDownload;

use UnexpectedValueException;

/**
 * Protobuf type <code>proto.FileDownload.Selector</code>
 */
class Selector
{
    /**
     * Generated from protobuf enum <code>FILE = 0;</code>
     */
    const FILE = 0;
    /**
     * Generated from protobuf enum <code>SMALL_THUMBNAIL = 1;</code>
     */
    const SMALL_THUMBNAIL = 1;
    /**
     * Generated from protobuf enum <code>LARGE_THUMBNAIL = 2;</code>
     */
    const LARGE_THUMBNAIL = 2;
    /**
     * Generated from protobuf enum <code>WAVEFORM_THUMBNAIL = 3;</code>
     */
    const WAVEFORM_THUMBNAIL = 3;

    private static $valueToName = [
        self::FILE => 'FILE',
        self::SMALL_THUMBNAIL => 'SMALL_THUMBNAIL',
        self::LARGE_THUMBNAIL => 'LARGE_THUMBNAIL',
        self::WAVEFORM_THUMBNAIL => 'WAVEFORM_THUMBNAIL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Selector::class, \Proto\FileDownload_Selector::class);

