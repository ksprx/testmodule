<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Global.proto

namespace Proto\RegisteredUser;

use UnexpectedValueException;

/**
 * Protobuf type <code>proto.RegisteredUser.Status</code>
 */
class Status
{
    /**
     * Generated from protobuf enum <code>LONG_TIME_AGO = 0;</code>
     */
    const LONG_TIME_AGO = 0;
    /**
     * Generated from protobuf enum <code>LAST_MONTH = 1;</code>
     */
    const LAST_MONTH = 1;
    /**
     * Generated from protobuf enum <code>LAST_WEEK = 2;</code>
     */
    const LAST_WEEK = 2;
    /**
     * Generated from protobuf enum <code>ONLINE = 3;</code>
     */
    const ONLINE = 3;
    /**
     * Generated from protobuf enum <code>EXACTLY = 4;</code>
     */
    const EXACTLY = 4;
    /**
     * Generated from protobuf enum <code>RECENTLY = 5;</code>
     */
    const RECENTLY = 5;
    /**
     * Generated from protobuf enum <code>SUPPORT = 6;</code>
     */
    const SUPPORT = 6;
    /**
     * Generated from protobuf enum <code>SERVICE_NOTIFICATIONS = 7;</code>
     */
    const SERVICE_NOTIFICATIONS = 7;

    private static $valueToName = [
        self::LONG_TIME_AGO => 'LONG_TIME_AGO',
        self::LAST_MONTH => 'LAST_MONTH',
        self::LAST_WEEK => 'LAST_WEEK',
        self::ONLINE => 'ONLINE',
        self::EXACTLY => 'EXACTLY',
        self::RECENTLY => 'RECENTLY',
        self::SUPPORT => 'SUPPORT',
        self::SERVICE_NOTIFICATIONS => 'SERVICE_NOTIFICATIONS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Status::class, \Proto\RegisteredUser_Status::class);

