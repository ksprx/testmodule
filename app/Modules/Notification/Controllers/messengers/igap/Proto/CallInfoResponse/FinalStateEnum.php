<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: CallInfo.proto

namespace Proto\CallInfoResponse;

use UnexpectedValueException;

/**
 * Protobuf type <code>proto.CallInfoResponse.FinalStateEnum</code>
 */
class FinalStateEnum
{
    /**
     * Generated from protobuf enum <code>UNKNOWN = 0;</code>
     */
    const UNKNOWN = 0;
    /**
     * Generated from protobuf enum <code>DONE = 1;</code>
     */
    const DONE = 1;
    /**
     * Generated from protobuf enum <code>BUSY = 2;</code>
     */
    const BUSY = 2;
    /**
     * Generated from protobuf enum <code>ROUTE_ERROR = 3;</code>
     */
    const ROUTE_ERROR = 3;
    /**
     * Generated from protobuf enum <code>REJECT = 4;</code>
     */
    const REJECT = 4;

    private static $valueToName = [
        self::UNKNOWN => 'UNKNOWN',
        self::DONE => 'DONE',
        self::BUSY => 'BUSY',
        self::ROUTE_ERROR => 'ROUTE_ERROR',
        self::REJECT => 'REJECT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(FinalStateEnum::class, \Proto\CallInfoResponse_FinalStateEnum::class);

