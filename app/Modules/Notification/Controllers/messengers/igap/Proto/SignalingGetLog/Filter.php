<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: SignalingGetLog.proto

namespace Proto\SignalingGetLog;

use UnexpectedValueException;

/**
 * Protobuf type <code>proto.SignalingGetLog.Filter</code>
 */
class Filter
{
    /**
     * Generated from protobuf enum <code>ALL = 0;</code>
     */
    const ALL = 0;
    /**
     * Generated from protobuf enum <code>MISSED = 1;</code>
     */
    const MISSED = 1;
    /**
     * Generated from protobuf enum <code>CANCELED = 2;</code>
     */
    const CANCELED = 2;
    /**
     * Generated from protobuf enum <code>INCOMING = 3;</code>
     */
    const INCOMING = 3;
    /**
     * Generated from protobuf enum <code>OUTGOING = 4;</code>
     */
    const OUTGOING = 4;

    private static $valueToName = [
        self::ALL => 'ALL',
        self::MISSED => 'MISSED',
        self::CANCELED => 'CANCELED',
        self::INCOMING => 'INCOMING',
        self::OUTGOING => 'OUTGOING',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Filter::class, \Proto\SignalingGetLog_Filter::class);

