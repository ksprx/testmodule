<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: UserRegister.proto

namespace Proto\UserRegisterResponse;

use UnexpectedValueException;

/**
 * Protobuf type <code>proto.UserRegisterResponse.Method</code>
 */
class Method
{
    /**
     * Generated from protobuf enum <code>VERIFY_CODE_SMS = 0;</code>
     */
    const VERIFY_CODE_SMS = 0;
    /**
     * Generated from protobuf enum <code>VERIFY_CODE_SOCKET = 1;</code>
     */
    const VERIFY_CODE_SOCKET = 1;
    /**
     * Generated from protobuf enum <code>VERIFY_CODE_SMS_SOCKET = 2;</code>
     */
    const VERIFY_CODE_SMS_SOCKET = 2;
    /**
     * Generated from protobuf enum <code>VERIFY_CODE_CALL = 3;</code>
     */
    const VERIFY_CODE_CALL = 3;

    private static $valueToName = [
        self::VERIFY_CODE_SMS => 'VERIFY_CODE_SMS',
        self::VERIFY_CODE_SOCKET => 'VERIFY_CODE_SOCKET',
        self::VERIFY_CODE_SMS_SOCKET => 'VERIFY_CODE_SMS_SOCKET',
        self::VERIFY_CODE_CALL => 'VERIFY_CODE_CALL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Method::class, \Proto\UserRegisterResponse_Method::class);

