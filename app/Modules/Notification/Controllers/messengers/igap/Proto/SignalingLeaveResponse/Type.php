<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: SignalingLeave.proto

namespace Proto\SignalingLeaveResponse;

use UnexpectedValueException;

/**
 * Protobuf type <code>proto.SignalingLeaveResponse.Type</code>
 */
class Type
{
    /**
     * Generated from protobuf enum <code>MISSED = 0;</code>
     */
    const MISSED = 0;
    /**
     * Generated from protobuf enum <code>REJECTED = 1;</code>
     */
    const REJECTED = 1;
    /**
     * Generated from protobuf enum <code>ACCEPTED = 2;</code>
     */
    const ACCEPTED = 2;
    /**
     * Generated from protobuf enum <code>NOT_ANSWERED = 3;</code>
     */
    const NOT_ANSWERED = 3;
    /**
     * Generated from protobuf enum <code>UNAVAILABLE = 4;</code>
     */
    const UNAVAILABLE = 4;
    /**
     * Generated from protobuf enum <code>DISCONNECTED = 5;</code>
     */
    const DISCONNECTED = 5;
    /**
     * Generated from protobuf enum <code>FINISHED = 6;</code>
     */
    const FINISHED = 6;
    /**
     * Generated from protobuf enum <code>TOO_LONG = 7;</code>
     */
    const TOO_LONG = 7;

    private static $valueToName = [
        self::MISSED => 'MISSED',
        self::REJECTED => 'REJECTED',
        self::ACCEPTED => 'ACCEPTED',
        self::NOT_ANSWERED => 'NOT_ANSWERED',
        self::UNAVAILABLE => 'UNAVAILABLE',
        self::DISCONNECTED => 'DISCONNECTED',
        self::FINISHED => 'FINISHED',
        self::TOO_LONG => 'TOO_LONG',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Type::class, \Proto\SignalingLeaveResponse_Type::class);

